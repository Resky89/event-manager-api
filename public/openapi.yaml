openapi: 3.0.3
info:
  title: Event Manager API
  version: 1.0.0
  description: |
    OpenAPI specification generated based on the provided Postman collection and Laravel routes.
    
    Notes:
    - Authentication uses Bearer JWT in the `Authorization` header for protected endpoints.
    - Token refresh and logout also use an `X-Refresh-Token` header.
servers:
  - url: "{baseUrl}"
    variables:
      baseUrl:
        default: "http://localhost:8000"
        description: Base URL of the API server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PerPage:
      name: per_page
      in: query
      description: Items per page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 15
    Search:
      name: search
      in: query
      required: false
      schema:
        type: string
    Sort:
      name: sort
      in: query
      description: Comma-separated fields to sort by. Prefix with '-' for descending. Allowed fields depend on the resource.
      required: false
      schema:
        type: string
    XRefreshToken:
      name: X-Refresh-Token
      in: header
      description: Refresh token header
      required: true
      schema:
        type: string
  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserCreateRequest:
      type: object
      required: [name, email, password, role]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: [user, organizer, admin]
        is_active:
          type: boolean
          default: true
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, organizer, admin]
        is_active:
          type: boolean
    EventCreateRequest:
      type: object
      required: [title, start_time, end_time]
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    EventUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    TicketCreateRequest:
      type: object
      required: [event_id, type, price, quantity]
      properties:
        event_id:
          type: integer
        type:
          type: string
        price:
          type: number
        quantity:
          type: integer
    TicketUpdateRequest:
      type: object
      properties:
        type:
          type: string
        price:
          type: number
        quantity:
          type: integer
    RegistrationCreateRequest:
      type: object
      required: [event_id, ticket_id]
      properties:
        event_id:
          type: integer
        ticket_id:
          type: integer
    FeedbackCreateRequest:
      type: object
      required: [event_id, rating]
      properties:
        event_id:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
    SuccessEnvelope:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: OK
        data:
          type: object
      required: [success]
    ErrorEnvelope:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Unprocessable Entity
        errors:
          type: object
      required: [success]
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        last_page:
          type: integer
    Paginated:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'
    VerifyOtpRequest:
      type: object
      required: [email, otp_code]
      properties:
        email:
          type: string
          format: email
        otp_code:
          type: string
          maxLength: 10
    ResendOtpRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
    PaymentPayRequest:
      type: object
      required: [transaction_ref]
      properties:
        method:
          type: string
        transaction_ref:
          type: string
paths:
  /api:
    get:
      summary: API health/info
      tags: [System]
      responses:
        '200':
          description: API is up
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered
        '422':
          description: Validation error
  /api/auth/login:
    post:
      summary: Login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Tokens returned
        '401':
          description: Invalid credentials
        '403':
          description: Requires verification (user role not yet OTP verified)
  /api/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      parameters:
        - $ref: '#/components/parameters/XRefreshToken'
      responses:
        '200':
          description: Tokens refreshed
        '422':
          description: X-Refresh-Token header missing

  /api/auth/verify-otp:
    post:
      summary: Verify OTP for user registration (role user)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOtpRequest'
      responses:
        '200':
          description: Verified and tokens issued
        '404':
          description: User not found
        '422':
          description: Invalid or expired OTP

  /api/auth/resend-otp:
    post:
      summary: Resend OTP for user registration (role user)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendOtpRequest'
      responses:
        '200':
          description: OTP resent
        '404':
          description: User not found
  /api/auth/logout:
    post:
      summary: Logout and revoke tokens
      tags: [Auth]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/XRefreshToken'
      responses:
        '200':
          description: Logged out
        '401':
          description: Unauthenticated
        '422':
          description: X-Refresh-Token header missing
  /api/registrations/{id}/pay:
    post:
      summary: Pay for a registration
      tags: [Registrations]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPayRequest'
      responses:
        '200':
          description: Paid
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden (not owner)
        '404':
          description: Not Found
        '422':
          description: Payment not pending

  /api/users:
    get:
      summary: List users (admin)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Sort'
        - name: role
          in: query
          required: false
          schema:
            type: string
            enum: [user, organizer, admin]
        - name: is_active
          in: query
          required: false
          schema:
            type: boolean
        - name: created_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
    post:
      summary: Create user (admin)
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Created
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
  /api/events/{eventId}/tickets/{id}:
    get:
      summary: Get ticket detail by event and ticket ID
      tags: [Tickets]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /api/users/{id}:
    get:
      summary: Get user by ID (admin)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
    put:
      summary: Update user (admin)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Updated
        '404':
          description: Not Found
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
    delete:
      summary: Delete user (admin)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '404':
          description: Not Found
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden

  /api/events:
    get:
      summary: List events
      tags: [Events]
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Sort'
        - name: id
          in: query
          required: false
          schema:
            type: integer
        - name: organizer_id
          in: query
          required: false
          schema:
            type: integer
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: location
          in: query
          required: false
          schema:
            type: string
        - name: start_time_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: start_time_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end_time_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end_time_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
    post:
      summary: Create event (organizer/admin)
      tags: [Events]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        '201':
          description: Created
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
  /api/events/{id}:
    get:
      summary: Get event by ID
      tags: [Events]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
    put:
      summary: Update event (organizer/admin)
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          description: Updated
        '404':
          description: Not Found
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
    delete:
      summary: Delete event (organizer/admin)
      tags: [Events]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '404':
          description: Not Found
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden

  /api/events/{eventId}/tickets:
    get:
      summary: List tickets for an event
      tags: [Tickets]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Sort'
        - name: id
          in: query
          required: false
          schema:
            type: integer
        - name: type
          in: query
          required: false
          schema:
            type: string
        - name: price_min
          in: query
          required: false
          schema:
            type: number
        - name: price_max
          in: query
          required: false
          schema:
            type: number
        - name: quantity_min
          in: query
          required: false
          schema:
            type: integer
        - name: quantity_max
          in: query
          required: false
          schema:
            type: integer
        - name: created_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
  /api/tickets:
    post:
      summary: Create ticket (organizer/admin)
      tags: [Tickets]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreateRequest'
      responses:
        '201':
          description: Created
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
  /api/tickets/{id}:
    put:
      summary: Update ticket (organizer/admin)
      tags: [Tickets]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdateRequest'
      responses:
        '200':
          description: Updated
        '404':
          description: Not Found
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
    delete:
      summary: Delete ticket (organizer/admin)
      tags: [Tickets]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
        '404':
          description: Not Found
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden

  /api/registrations:
    post:
      summary: Register for event
      tags: [Registrations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCreateRequest'
      responses:
        '201':
          description: Created
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
  /api/me/registrations:
    get:
      summary: List my registrations
      tags: [Registrations]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Sort'
        - name: event_id
          in: query
          required: false
          schema:
            type: integer
        - name: ticket_id
          in: query
          required: false
          schema:
            type: integer
        - name: status
          in: query
          required: false
          schema:
            type: string
        - name: registered_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: registered_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK

  /api/feedback:
    post:
      summary: Submit feedback
      tags: [Feedback]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackCreateRequest'
      responses:
        '201':
          description: Created
        '422':
          description: Validation error
        '401':
          description: Unauthenticated
  /api/events/{eventId}/feedback:
    get:
      summary: List feedback for an event
      tags: [Feedback]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Sort'
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
        - name: rating_in
          in: query
          required: false
          description: Comma-separated list of ratings, e.g., 4,5
          schema:
            type: string
        - name: rating
          in: query
          required: false
          schema:
            type: integer
        - name: rating_min
          in: query
          required: false
          schema:
            type: integer
        - name: rating_max
          in: query
          required: false
          schema:
            type: integer
        - name: comment
          in: query
          required: false
          schema:
            type: string
        - name: created_at_min
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: created_at_max
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
